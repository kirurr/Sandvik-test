{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["\"use strict\";\r\n\r\n// проверяем, загружена ли страница и начинаем работу\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  // выбираем форму и обрабатываем нажатие на кнопку\r\n  const form = document.getElementById('form');\r\n  const button = document.getElementById('form-button');\r\n\r\n  const text = document.querySelectorAll(\".text\");\r\n\r\n  function toggleAnimClass(text) {\r\n    text.forEach(e => e.classList.toggle('anim'));\r\n  }\r\n  function toggleCompleteClass(text) {\r\n    text.forEach(e => e.classList.toggle('complete'));\r\n  }\r\n  function toggleErrorClass(text) {\r\n    text.forEach(e => e.classList.toggle('error'));\r\n  }\r\n\r\n\r\n\r\n  form.addEventListener('submit', formSend);\r\n\r\n  // функция отправки формы\r\n  async function formSend(e) {\r\n    // прерываем отправку\r\n    e.preventDefault();\r\n\r\n    // проверяем, все ли подходит\r\n    let error = formValidate(form);\r\n\r\n    // забираем данные из полей\r\n    let formData = new FormData(form);\r\n\r\n    // отправляем форму\r\n\r\n    if (error === 0) {\r\n      toggleAnimClass(text);\r\n      let response = await fetch('send.php', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n\r\n      if (response.ok) {\r\n        let result = await response.json();\r\n        if (result.message === 'sended') {\r\n          form.reset();\r\n          toggleCompleteClass(text);\r\n          setTimeout(toggleAnimClass, 1500, text);\r\n          setTimeout(toggleCompleteClass, 2000, text);\r\n        }\r\n\r\n      } else {\r\n        form.reset();\r\n        toggleErrorClass(text);\r\n        setTimeout(toggleAnimClass, 1500, text);\r\n        setTimeout(toggleErrorClass, 2000, text);\r\n      }\r\n\r\n    } else {\r\n      // alert('Заполните имя и почту');\r\n    }\r\n  }\r\n\r\n  // функция проверки полей\r\n  function formValidate(form) {\r\n    // собираем ошибки\r\n    let error = 0;\r\n    // выбираем необходимые поля\r\n    let formReq = document.querySelectorAll('._req');\r\n\r\n    // запускаем проверку\r\n    for (let index = 0; index < formReq.length; index++) {\r\n      const input = formReq[index];\r\n      formRemoveError(input);\r\n\r\n      if (input.classList.contains('_email')) {\r\n        if (emailTest(input)) {\r\n          formAddError(input);\r\n          error++;\r\n        }\r\n      } else {\r\n        if (input.value === '') {\r\n          formAddError(input);\r\n          error++;\r\n        }\r\n      }\r\n    }\r\n    return error;\r\n  }\r\n\r\n  // функции добавления и удаления класса с ошибкой\r\n  function formAddError(input) {\r\n    input.parentElement.classList.add('_error');\r\n    input.parentElement.classList.add('_error-anim');\r\n    setTimeout(formRemoveErrorAnim, 300, input);\r\n  }\r\n  function formRemoveErrorAnim(input) {\r\n    input.parentElement.classList.remove('_error-anim');\r\n  }\r\n  function formRemoveError(input) {\r\n    input.parentElement.classList.remove('_error');\r\n  }\r\n\r\n  // функция проверки почты\r\n  function emailTest(input) {\r\n    return !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,8})+$/.test(input.value);\r\n  }\r\n\r\n\r\n\r\n  const about = [document.querySelector('.about-text-anim'), document.querySelector('.about-img-anim')];\r\n\r\n  const aboutOptions = {\r\n    root: null,\r\n    threshold: 0,\r\n    rootMargin: '-100px'\r\n  };\r\n\r\n  const aboutObserver = new IntersectionObserver(function (entry, observer) {\r\n    entry.forEach(item => {\r\n      if (item.isIntersecting) {\r\n        item.target.classList.add('show-anim');\r\n        aboutObserver.unobserve(item.target);\r\n      }\r\n    });\r\n  }, aboutOptions);\r\n\r\n  about.forEach(item => {\r\n    aboutObserver.observe(item);\r\n  });\r\n\r\n\r\n\r\n  const panels = document.querySelectorAll('.panel');\r\n\r\n  const panelsOptions = {\r\n    root: null,\r\n    threshold: 0,\r\n    rootMargin: '-100px'\r\n  };\r\n\r\n  const panelsObserver = new IntersectionObserver(function (entry, observer) {\r\n    entry.forEach(item => {\r\n      if (item.isIntersecting) {\r\n        item.target.classList.add('show-anim');\r\n        panelsObserver.unobserve(item.target);\r\n      }\r\n    });\r\n  }, panelsOptions);\r\n\r\n  panels.forEach(item => {\r\n    panelsObserver.observe(item);\r\n  });\r\n\r\n  const hamburger = document.querySelector('.hamburger-cover');\r\n  const hamburgerCover = document.querySelector('.hamburger-menu-cover');\r\n  const hamburgerLinks = document.querySelectorAll('.hamburger-link');\r\n  const lexLogo = document.querySelector('.lex-logo');\r\n  const body = document.body;\r\n\r\n\r\n  hamburger.addEventListener('click', function () {\r\n    hamburger.classList.toggle('open');\r\n    hamburgerCover.classList.toggle('open');\r\n    body.classList.toggle('open');\r\n  });\r\n\r\n  lexLogo.addEventListener('click', function () {\r\n    hamburger.classList.toggle('open');\r\n    hamburgerCover.classList.toggle('open');\r\n    body.classList.toggle('open');\r\n  });\r\n\r\n  hamburgerLinks.forEach(e =>\r\n    e.addEventListener('click', function () {\r\n      hamburger.classList.remove('open');\r\n      hamburgerCover.classList.remove('open');\r\n      body.classList.remove('open');\r\n    }\r\n    ));\r\n\r\n\r\n\r\n\r\n})"],"names":["document","addEventListener","form","getElementById","text","querySelectorAll","toggleAnimClass","forEach","e","classList","toggle","toggleCompleteClass","toggleErrorClass","formAddError","input","parentElement","add","setTimeout","formRemoveErrorAnim","remove","formRemoveError","emailTest","test","value","async","preventDefault","error","formReq","index","length","contains","formValidate","formData","FormData","response","fetch","method","body","ok","json","message","reset","about","querySelector","aboutObserver","IntersectionObserver","entry","observer","item","isIntersecting","target","unobserve","root","threshold","rootMargin","observe","panels","panelsObserver","hamburger","hamburgerCover","hamburgerLinks","lexLogo"],"version":3,"file":"index.6301f908.js.map"}